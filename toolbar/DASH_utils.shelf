<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <toolshelf name="DASH-utils" label="DASH - - - Utils">
    <memberTool name="DASH-delete"/>
    <memberTool name="DASH-attibwrangle_color"/>
    <memberTool name="notes_clipboard_io"/>
    <memberTool name="helpwiki_starter"/>
  </toolshelf>

  <tool name="DASH-delete" label="Delete Parm Channels" icon="BUTTONS_clear">
    <helpText><![CDATA[= Delete Parm Channels =
#icon: BUTTONS/clear

""" Delete parameters' animation and expressions on selected nodes. """

== Overview ==

Select Nodes and run this to delete their expressions and animation channels.

If you pass the argument __`revert_defaults`__ set to `True`, it will also revert the parameters to defaults. The reason this option is off by default is because it's something one can already do in the parameters' menu with _Revert to Factory Defaults_.]]></helpText>
    <script scriptType="python"><![CDATA[import importlib
from DASH_hom import DASH_nodeutils as tool
importlib.reload(tool)

tool.delete_parm_channels()

"""
Arguments' defaults.

sel=hou.selectedNodes()
    Will process all the selected nodes.

defaults=False
    If set to True, it will also revert parameters to default values.
"""
]]></script>
  </tool>

  <tool name="DASH-attibwrangle_color" label="Color SOP Wrangles" icon="SOP_attribwrangle">
    <helpText><![CDATA[= Color SOP Wrangles =
#icon: SOP/attribwrangle

""" Automatically color SOP wrangles according to their class. """

== Overview ==
Select Attrib Wrangles SOP and select this to change their color automatically according to class. If no node is selected, it will try to color all attrib wrangle SOPS.

:fig: [Image:https://i.imgur.com/4ND7ghc.png]
Â  Â  """Default Colors"""

__`keep_color`__ is set to _True_ by default, meaning, the node color will only be changed if the node is using 0.8 white or the Houdini default color.
:fig: [Image:https://i.imgur.com/kuLjCWD.png]
Â  Â  """The 0.8 gray swatch will also be considered default."""

For more options, check the _Script_ tab of the script.

:fig: [Image:https://i.imgur.com/kJKptSM.png]
Â  Â  """Rainbow Colors"""
Â  Â Â ]]></helpText>
    <script scriptType="python"><![CDATA[# COLOR ATTRIBUTE WRANGLES AUTOMATICALLY BY CLASS
import importlib
from DASH_hom import DASH_nodeutils as tool
importlib.reload(tool)

tool.attwrangle_color()

"""
Arguments' defaults:

sel=hou.selectedNodes()
    Will process all the selected nodes.

colors=[(.55, .45, .3), (.765, 1, .576), (0.48, 0.75, 1), (0.75, 0.55, 0.95), (0.354, 0.304, 0.354)]    
    Detail: Brown. Numbers: Pale Dark Purle. Points: Blue. Primitives: Green. Vertices: Violet.

rainbow=False
    rainbow=True will have the class colors be a rainbow hues.
    
keep_color=True
    If the node already has a non default color it one has to set keep_color=False to overwrite it.

comment=False
    comment=True will have the first code line set as comment of the node if the line is a code comment //.
"""
]]></script>
  </tool>

  <tool name="notes_clipboard_io" label="Sticky Notes Clipboard I/O" icon="BUTTONS_network_sticky">
    <helpText><![CDATA[= Notes Clipboard I/O =
#icon: BUTTONS/network_sticky

""" Get the scene nodes in and out of the clipboard. """

== Overview ==

This script will perform both the import and export of sticky notes. To be assured of which action was taken, check the console (terminal in Linux).

=== Usage ===
- Press this button to get the Stickies text onto the clipboard.
- Paste it in your spell/grammar solution of choice and copy it back to the clipboard once finished.
- Press this button again, and all the modified notes will update for each sticky.


NOTE:
    The script first checks if the clipboard already contains sticky note data referencing existing stickies, even if partial, and if so, those stickies will be updated and <u>the clipboard will be emptied</u>.

    Otherwise, the existing stickies's data will be exported.

    To guarantee a successful use, do not change the sticky paths or the separators, `"-----"`, just the text contents.]]></helpText>
    <script scriptType="python"><![CDATA[import importlib
from DASH_hom import DASH_nodeutils as tool
importlib.reload(tool)

tool.sticky_notes_io()]]></script>
  </tool>

  <tool name="helpwiki_starter" label="Helpwiki Starter" icon="SOP_script">
    <helpText><![CDATA[= Helpwiki Starter =
#icon: SOP/script
""" Creates Houdini Help markup from a template. Fill out the appropriate information. """

The template is as following:

{{{

#icon page property based on asset name

= Title based on asset label =

"""Quick asset description."""

== Overview ==

@inputs
...

@parameters
...

@outputs
...

}}}

For VOPs, parameters of different signatures are bundled together.
{{{
Value:
    #id: value
    #id: value_u0
    #id: value_v0
    #id: value_p0
    Description for Value
}}}]]></helpText>
    <script scriptType="python"><![CDATA[import importlib
from DASH_hom import DASH_nodeutils as tool
importlib.reload(tool)

help = tool.createNodeHelp()
#print (help)
hou.ui.copyTextToClipboard(help) # put it in the clipboard




]]></script>
  </tool>
</shelfDocument>
